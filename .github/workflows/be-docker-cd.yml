name: Backend Prod Docker CD

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest # GitHub-hosted runner
    outputs:
      image: ${{ steps.export-image.outputs.image }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Copy JAR to root
        run: cp build/libs/newsum-0.0.1-SNAPSHOT.jar app.jar

      - name: Install Infisical CLI
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Fetch .env from Infisical
        run: |
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > .env

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        id: export-image
        run: |
          IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:latest"
          docker build -t $IMAGE .
          docker push $IMAGE
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  deploy-prod-1:
    name: Deploy to EC2 AZ1
    needs: build
    runs-on: [self-hosted, linux, ec2-prod-runner]
    steps:
      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Install Infisical CLI
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Fetch .env from Infisical
        run: |
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > .env
            
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Determine deployment target (blue or green)
        id: decide
        run: |
          if docker ps --format '{{.Names}}' | grep -q backend-blue; then
            echo "Deploying to green"
            echo "TARGET=green" >> $GITHUB_ENV
          else
            echo "Deploying to blue"
            echo "TARGET=blue" >> $GITHUB_ENV
          fi

      - name: Pull and Deploy Docker
        run: |
          cd ${{ secrets.BACKEND_PATH_PROD }}
          cp $GITHUB_WORKSPACE/.env .env

          docker compose -f docker-compose-${{ env.TARGET }}.yml down || true
          docker compose -f docker-compose-${{ env.TARGET }}.yml pull
          docker compose -f docker-compose-${{ env.TARGET }}.yml up -d

          rm -f .env


  deploy-prod-2:
    name: Deploy to EC2 AZ2
    needs: build
    runs-on: [self-hosted, linux, ec2-prod-runner]
    steps:
      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Install Infisical CLI
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Fetch .env from Infisical
        run: |
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > .env
            
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | \
            docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Determine deployment target (blue or green)
        id: decide
        run: |
          if docker ps --format '{{.Names}}' | grep -q backend-blue; then
            echo "Deploying to green"
            echo "TARGET=green" >> $GITHUB_ENV
          else
            echo "Deploying to blue"
            echo "TARGET=blue" >> $GITHUB_ENV
          fi

      - name: Pull and Deploy Docker
        run: |
          cd ${{ secrets.BACKEND_PATH_PROD }}
          cp $GITHUB_WORKSPACE/.env .env

          docker compose -f docker-compose-${{ env.TARGET }}.yml down || true
          docker compose -f docker-compose-${{ env.TARGET }}.yml pull
          docker compose -f docker-compose-${{ env.TARGET }}.yml up -d

          rm -f .env

