name: Backend Dev docker CD

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Install Infisical CLI from CloudFront
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Fetch .env from Infisical
        run: |
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_DEV }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: newsum-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: SSH into EC2 and Deploy Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: newsum-backend
          IMAGE_TAG: latest
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_DEV }}" > private_key.pem
          chmod 600 private_key.pem

          scp -i private_key.pem .env ${{ secrets.EC2_USER_DEV }}@${{ secrets.EC2_HOST_DEV }}:/home/${{ secrets.EC2_USER_DEV }}/app/.env

          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER_DEV }}@${{ secrets.EC2_HOST_DEV }} << 'EOF'
            cd /home/${{ secrets.EC2_USER_DEV }}/app
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker compose -f docker-compose.yml down
            docker compose -f docker-compose.yml up -d
            rm -f .env
          EOF

          rm -f private_key.pem
