name: Backend Prod Docker CD (Blue-Green)

on:
  push:
    branches: [ dev ]
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'

jobs:
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1Ô∏è‚É£ Build & Push
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  build:
    runs-on: ubuntu-latest
    outputs:
      image:  ${{ steps.push.outputs.image }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Gradle Build
        run: |
          ./gradlew clean build
          cp build/libs/newsum-0.0.1-SNAPSHOT.jar app.jar

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:      ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:             ap-northeast-2

      - name: ECR Login
        run: |
          aws ecr get-login-password --region ap-northeast-2 \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build & Push image
        id: push
        run: |
          IMAGE="${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:latest"
          docker build -t "$IMAGE" .
          docker push  "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2Ô∏è‚É£ Deploy to AZ-1
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-az1:
    needs: build
    runs-on: [ self-hosted, linux, ec2-prod-runner ]
    outputs:
      target: ${{ steps.decide.outputs.target }}

    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ap-northeast-2

      - name: ECR Login
        run: |
          aws ecr get-login-password --region ap-northeast-2 \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Fetch .env
        run: |
          curl -Ls https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical && sudo mv infisical /usr/local/bin/infisical
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} > /tmp/deploy.env

      - name: Decide target (from SSM)
        id: decide
        run: |
          CURRENT=$(aws ssm get-parameter \
            --name "/newsum/activeColor" \
            --region ap-northeast-2 \
            --query 'Parameter.Value' \
            --output text || echo "none")
      
          echo "üü° ÌòÑÏû¨ activeColor Í∞í: $CURRENT"
      
          if [ "$CURRENT" = "blue" ]; then
            echo "üü¢ Îã§Ïùå Î∞∞Ìè¨ ÎåÄÏÉÅ: green"
            echo "target=green" >> "$GITHUB_OUTPUT"
            echo "TARGET=green"  >> "$GITHUB_ENV"
          else
            echo "üîµ Îã§Ïùå Î∞∞Ìè¨ ÎåÄÏÉÅ: blue"
            echo "target=blue" >> "$GITHUB_OUTPUT"
            echo "TARGET=blue" >> "$GITHUB_ENV"
          fi


      - name: Deploy to AZ-1
        run: |
          cd ${{ secrets.BACKEND_PATH_PROD }}
          cp /tmp/deploy.env .env

          docker compose -f docker-compose-${TARGET}.yml pull
          docker compose -f docker-compose-${TARGET}.yml up -d --remove-orphans

          rm -f .env

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3Ô∏è‚É£ Deploy to AZ-2
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-az2:
    needs: deploy-az1
    runs-on: [ self-hosted, linux, ec2-prod-runner ]
    env:
      TARGET: ${{ needs.deploy-az1.outputs.target }}

    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ap-northeast-2

      - name: ECR Login
        run: |
          aws ecr get-login-password --region ap-northeast-2 \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Fetch .env
        run: |
          curl -Ls https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical && sudo mv infisical /usr/local/bin/infisical
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} > /tmp/deploy.env

      - name: Deploy to AZ-2
        run: |
          cd ${{ secrets.BACKEND_PATH_PROD }}
          cp /tmp/deploy.env .env

          docker compose -f docker-compose-${TARGET}.yml pull
          docker compose -f docker-compose-${TARGET}.yml up -d --remove-orphans

          rm -f .env

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 4Ô∏è‚É£ Switch ALB + Update SSM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  switch-alb:
    needs: [ deploy-az2 ]
    runs-on: ubuntu-latest
    env:
      TARGET: ${{ needs.deploy-az1.outputs.target }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ap-northeast-2
  
      - name: Pick TargetGroup ARN
        id: pick
        run: |
          if [ "$TARGET" = "blue" ]; then
            echo "arn=${{ secrets.TG_BLUE_ARN }}" >> "$GITHUB_OUTPUT"
          else
            echo "arn=${{ secrets.TG_GREEN_ARN }}" >> "$GITHUB_OUTPUT"
          fi
  
      - name: Switch ALB Listener
        run: |
          aws elbv2 modify-listener \
            --listener-arn ${{ secrets.ALB_LISTENER_ARN }} \
            --default-actions Type=forward,TargetGroupArn=${{ steps.pick.outputs.arn }} \
            --region ap-northeast-2
  
      - name: Update SSM activeColor
        run: |
          echo "üîÅ SSMÏóê Ï†ÄÏû•Ìï† activeColor: $TARGET"
          aws ssm put-parameter \
            --name "/newsum/activeColor" \
            --value "$TARGET" \
            --type String \
            --overwrite \
            --region ap-northeast-2

