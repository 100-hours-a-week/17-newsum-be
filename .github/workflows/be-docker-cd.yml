name: Backend Prod Docker CD

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**/README.md'
      - '**/.gitignore'

jobs:
  deploy:
    runs-on: [self-hosted, linux, dev]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build with Gradle
        run: |
          ./gradlew clean build
          
      - name: Check build output
        run: |
          ls -alh build/libs
          
      - name: Install Infisical CLI from CloudFront
        run: |
          curl -L https://${{ secrets.AWS_CLOUDFRONT_URL }}/tools/infisical-linux-amd64 -o infisical
          chmod +x infisical
          sudo mv infisical /usr/local/bin/infisical

      - name: Fetch .env from Infisical
        run: |
          infisical export \
            --env=${{ secrets.INFISICAL_ENV_PROD }} \
            --projectId=${{ secrets.INFISICAL_PROJECT_ID }} \
            --token=${{ secrets.INFISICAL_TOKEN_PROD }} \
            --format=dotenv \
            --domain=${{ secrets.INFISICAL_API_URL }} \
            > .env

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.ECR_REPO }}:latest $GITHUB_WORKSPACE
          docker tag ${{ secrets.ECR_REPO }}:latest ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:latest
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPO }}:latest


      - name: Deploy Spring Boot app with Docker
        run: |
          cd ${{ secrets.BACKEND_PATH_PROD }}

          # 기존 컨테이너 중지 및 제거
          docker compose -f docker-compose.yml down

          # .env 덮어쓰기
          mv $GITHUB_WORKSPACE/.env .env

          # 새 버전 배포
          docker compose -f docker-compose.yml up -d

          # 보안상 .env 제거
          rm -f .env

