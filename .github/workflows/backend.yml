#test3
name: Backend CI/CD

on:
  pull_request:
    branches: [ dev ]
  push:
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build -x test
      
    - name: Upload JAR
      uses: actions/upload-artifact@v4
      with:
        name: backend-jar
        path: build/libs/*.jar

  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests if tests exist
      run: |
        if [ -d "src/test" ]; then
          ./gradlew test
        else
          echo "No test directory found, skipping tests"
        fi

  deploy:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download JAR
      uses: actions/download-artifact@v4
      with:
        name: backend-jar
        path: build/libs/
        
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.GCP_VM_IP }} >> ~/.ssh/known_hosts
        
    - name: Deploy to GCP VM
      env:
        # Fetch environment variables from Infisical
        INFISICAL_ENV: ${{ secrets.INFISICAL_ENV }}
        INFISICAL_PROJECT_ID: ${{ secrets.INFISICAL_PROJECT_ID }}
        INFISICAL_TOKEN: ${{ secrets.INFISICAL_TOKEN }}
        INFISICAL_API_URL: ${{ secrets.INFISICAL_API_URL }}
      run: |
        # Copy JAR to VM
        scp build/libs/*.jar ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }}:/home/${{ secrets.GCP_VM_USER }}/be/
        
        # Get environment variables from Infisical and format them for export
        ENV_VARS=$(infisical export \
          --env=$INFISICAL_ENV \
          --projectId=$INFISICAL_PROJECT_ID \
          --token=$INFISICAL_TOKEN \
          --format=dotenv \
          --domain=$INFISICAL_API_URL | \
          grep -v '^#' | \
          sed 's/^/export /' | \
          sed 's/=/="/;s/$/\"/')
        
        # SSH into VM and restart the service with environment variables
        ssh ${{ secrets.GCP_VM_USER }}@${{ secrets.GCP_VM_IP }} "\
          cd /home/${{ secrets.GCP_VM_USER }}/be && \
          
          # Stop previous instance if running
          if [ -f backend.pid ]; then
            kill \$(cat backend.pid) || true
            rm -f backend.pid
          fi && \
          
          # Set environment variables and start the application
          echo 'Setting environment variables and starting application...' && \
          $ENV_VARS && \
          nohup java -jar newsum-0.0.1-SNAPSHOT.jar > backend.log 2>&1 & \
          echo \$! > backend.pid && \
          echo 'Application started with PID: '\$(cat backend.pid)"
          
          # Wait for service to start
          sleep 10'
